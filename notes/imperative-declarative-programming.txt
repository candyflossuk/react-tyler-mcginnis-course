Imperative (HOW)
- Stick shift car
- Directions

Declarative (WHAT)
- Automatic car

Many declarative approaches have some sort of imperative abstraction layer
> I.e an automatic car has some abstraction layer over shifting gears.

Many (if not all) declarative approaches have some sort of underlying imperative abstraction


Imperative:
C ++, C , Java

Declarative:
SQL, html

Mix: Javascript, C#, Python

// Imperative -  Javascript Examples

// Double all the numbers in an array
function double(arr) {
  let results = []
  for (let i=0; i < arr.length; i++){
    results.push(arr[i]*2)
  }
  return results
}

// Add all the numbers in an array
function add(arr) {
  let result = 0
  for (let i=0; i < arr.length; i++){
    result += arr[i]
  }
  return result
}

// add click event handler to element which has id of btn.
// When clicked, toggle (add or remove) the highlight class as well as change the createTextNode
// to 'Add Highlight' or 'Remove Highlight' depending on the state of the element

$("#btn").click(function(){
  $(this).toggleClass("highlight")
  $(this).text() === 'Add Highlight'
    ? $(this).text('Remove Highlight')
    : $(this).text('Add Highlight')
})

// What makes these three examples imperative?

> Describe HOW to do something
> Laying out steps for how to implement the functionalltiy we wants
> In each example we are mutating some piece of state
> The code isn't 'readable'

// Lets look at some declarative examples of the above code

function double(arr){
  return arr.map((item) => item * 2)
}

function add(arr){
  return arr.reduce((prev, current) => prev + current, 0)
}

<Btn
  onToggleHighlight={this.handleToggleHighlight}
  highlight={this.state.highlight}>
    {this.state.buttonText}
</Btn>

// The most declarative solutions are an abstraction over some imperative implementation

// In every example (of the declarative appraoch) we describe WHAT we want to happen rather than HOW

// declarative code - is context independant - rather than the steps to accomplish goal - the
// same code can be used in deifferent programs and work fine.
// Imperative code relies on the current state of an object
