// Tutorial artifacts based on https://tylermcginnis.com/beginners-guide-to-javascript-prototype/
// A basic object is defined by {}, add properties and methods using dot notation

let animal = {}
animal.name = 'Leo'
animal.energy = 10

animal.eat = function(amount) {
  console.log(`${this.name} is eating.`)
  this.energy += amount
}

animal.sleep = function(length){
  console.log(`${this.name} is sleeping.`)
  this.energy += length
}

animal.play = function(length){
  console.log(`${this.name} is playing.`)
  this.energy -= length
}

// functional instantiation
// functional instantiation - encapsulate logic inside of a function to invoke whenever
// we need to create a new animal - using a constructor functional

function Animal(name, energy){
  let animal = {}
  animal.name = name
  animal.energy = energy

  animal.eat = function(amount) {
    console.log(`${this.name} is eating.`)
    this.energy += amount
  }

  animal.sleep = function(length){
    console.log(`${this.name} is sleeping.`)
    this.energy += length
  }

  animal.play = function(length){
    console.log(`${this.name} is playing.`)
    this.energy -= length
  }

  return animal

}

const leo = Animal('Leo', 7)
cons snoop = Animal('Snoop', 10)

// Functional instantiation with Shared methods

const animalMethods = {
  eat(amount) {
    console.log(`${this.name} is eating.`)
    this.energy += amount
  },
  sleep(length) {
    console.log(`${this.name} is sleeping.`)
    this.energy += length
  },
  play(length){
    console.log(`${this.name} is playing.`)
    this.energy -= length
  }
}

function Animal (name, energy){
  let animal = {}
  animal.name = animal
  animal.energy = energy
  animal.eat = animalMethods.eat
  animal.sleep = animalMethods.sleep
  animal.play = animalMethods.play

  return animal
}

const leo = Animal('Leo', 7)
const snoop = Animal('Snoop', 10)

// Shared methods are in their own object and referencing that
// object outside of the animal function is now possible
// meaning no memory waste or overly large animal objects!

//IN JS - every function has a prototype property propert that
//references an object.

function doThing(){}
console.log(doThing.prototype) // {}

// Prototypal instantiation

function Animal (name, energy) {
  let animal = Object.create(Animal.prototype)
  animal.name = name
  animal.energy = energy
}

Animal.prototype.eat = function (amount){
  console.log(`${this.name} is eating.`)
  this.energy += amount
}

Animal.prototype.sleep = function (length) {
  console.log(`${this.name} is sleeping.`)
  this.energy += length

Animal.prototype.play = function (length) {
  console.log(`${this.name} is playing.`)
  this.energy -= length
}

const leo = Animal('Leo', 7)
const snoop = Animal('Snoop', 10)

leo.eat(10)
snoop.play(5)

// Prototype is just a property every function in JS has, allows us to share
// methods across all instances of a function.
