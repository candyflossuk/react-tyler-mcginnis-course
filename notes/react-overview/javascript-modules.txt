Javascript Modules

> Individual pieces that when put together, form the item
> Each piece has a specific purpose and clear boundaries for how it interacts with the other pieces.

Benefits: (Using the example of the watch)
Reusability:
> Same pieces used throughout the item (watch in the case of the example)
> Intelligent design decisions centered on modularity - able to re use the same components in different aspects of the design.
> Ability to re use pieces simplifies build.

Composability:
> Establish clear boundaries for each individual component
> Compose each piece together to create a fully functional item.

Leverage:
> The most important thing is that each piece comes together
> Dosn't matter who builds it

Isolation:
> Understandng the whole is difficult.
> Small focused pieces make it easier.
> Allows people to work individually on the item, without bottle necking each together

Organization:
> Byproduct of each individual piece having a clear boundary of how it interacts
with other pieces.

Each individual piece are called modules.

WHAT WOULD A MODULE ENCOMPASS?

Each module has three parts - dependencies(imports), code and exports

Dependencies:
When one module needs another - it can import it
Import react componenets
Import libarry Modules

Code:
Actual code of the modules

Exports:
Interface to the module, whatever you export from a module will be available to whoever imports it

Looking at the benefits of watch design - they can be applied to softawre with the same Benefits

Reusability:
> Maximise reusability.
> Can be re imported
> If module is useful in another application it can be packaged up and
  downloaded by anyone

Composability:
Imports and exports make for easy composition.
A sign of good software is that it can be easily deleted.
Modules increase the delete-ability of your code.

Leverage:
NPM registry hosts the largest collection of free, reusable Modules

Isolation:
> Understanding the whole system is difficult
> Software is composed of small, focused (modules)
> Each of these modules can be thought about, build and or repaired in Isolation

Organization:
Modules provide a natural separation point.
Modules prevent you polluting the global namespace and allow you to avoid naming collisions.

FILE SEPERATION IS NOT BUILDING JS MODULES
This leaves code in the global namespace making it edtiable

We can take this one step further:
Create the methods and run them under an app

// APP.js
var APP = {}

// users.js
function usersWrapper() {
  function getUsers(){
    ...
  }
}

APP.getUsers = getUsers

This helps wrap the methods in APP and wrapper function usersWrapper

But.... can we get rid of the wrapper functions? Is there a way to
invoke anonymous function so we don't have to give the wrapper functions a name?
YES - use IIFE - Immeediately Invoked Function Expression

(function ()){
  console.log('Pronounced IF-EE')
})()

Just an anonymous function expression wrapped in parens ()
Just like any other function in order to invoke it - add parens to the end of it

We can use the knowledge of IIFEs to get rid of the ugly wrapper functions

// users.js
(function () {
  var users = ["Tyler", "Sarah", "Dan"]

  function getUsers(){
    return users
  }

  APP.getUsers = getUsers
})()

// dom.js
(function () {
  function addUserToDOM(name) {
    const node = document.createElement("li")
    const text = document.createTextNode(name)
    node.appendChild(text)

    document.getElementById("users").appendChild(node)
  }

  document.getElementById("submit").addEventListener("click", function() {
    var input = document.getElementById("input")
    addUserToDOM(input.value)

    input.value = ""
  })

  var users = APP.getUsers
  for (var i = 0; i < users.length; i++){
    addUserToDOM(users[i])
  }

})()

This pattern can be referred to as the "IFFE Module Pattern"


THE IFFE MODULE PATTERN

Benefits:
  > Avoid dumping everything into the global namespace

Downsides:
  > Have 1 item on the global namespace (APP)
  > The order of the <script> tags in our index.html matter.

How would we make our own standard for creating and managing modules?
> Each file has its own module.
> Each file defines explicit exports - available to any other file that imports the module

Module standard
1 ) File based
2 ) Explicit Imports
3 ) Explicit exports


// Something like this
var users = ["Tyler", "Sarah", "Dan"]

function getUsers(){
  return users
}

module.exports = {
  getUsers: function () {
    return users
  },
  sortUsers: function (){
    return users.sort()
  }
  firstUser: function(){
    return users[0]
  }
}

// Now that we have figured out what exporting from a module looks like -
// lets figure out what importing looks like

var users = require('./users')

users.getUsers()
users.sortUsers()
users.firstUser()

//With our hypothetical exports and require syntax we have kept the benefits
//of modules while getting rid of the two downsides to our IIFE Modules pattern

This standard is called COMMONJS

CommonJS group defined a module format to solve Javascript scope issues,
making sure each module is executed in its own namespace.
Forces modules to explicitly export those variables it wants to expose
to the 'universe' and also by defining those other modules required
properly to work.

CommonJs isnt great as it loads syncronously
> Browser dosn't understand it
> Loads modules synchronously - which in the browser is a terrible user experience.
> The solution is the 'module bundler'


MODULE BUNDLERS
