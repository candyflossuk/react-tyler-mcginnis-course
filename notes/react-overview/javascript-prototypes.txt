// Tutorial artifacts based on https://tylermcginnis.com/beginners-guide-to-javascript-prototype/
// A basic object is defined by {}, add properties and methods using dot notation

let animal = {}
animal.name = 'Leo'
animal.energy = 10

animal.eat = function(amount) {
  console.log(`${this.name} is eating.`)
  this.energy += amount
}

animal.sleep = function(length){
  console.log(`${this.name} is sleeping.`)
  this.energy += length
}

animal.play = function(length){
  console.log(`${this.name} is playing.`)
  this.energy -= length
}

// functional instantiation
// functional instantiation - encapsulate logic inside of a function to invoke whenever
// we need to create a new animal - using a constructor functional

function Animal(name, energy){
  let animal = {}
  animal.name = name
  animal.energy = energy

  animal.eat = function(amount) {
    console.log(`${this.name} is eating.`)
    this.energy += amount
  }

  animal.sleep = function(length){
    console.log(`${this.name} is sleeping.`)
    this.energy += length
  }

  animal.play = function(length){
    console.log(`${this.name} is playing.`)
    this.energy -= length
  }

  return animal

}

const leo = Animal('Leo', 7)
cons snoop = Animal('Snoop', 10)

// Functional instantiation with Shared methods

const animalMethods = {
  eat(amount) {
    console.log(`${this.name} is eating.`)
    this.energy += amount
  },
  sleep(length) {
    console.log(`${this.name} is sleeping.`)
    this.energy += length
  },
  play(length){
    console.log(`${this.name} is playing.`)
    this.energy -= length
  }
}

function Animal (name, energy){
  let animal = {}
  animal.name = animal
  animal.energy = energy
  animal.eat = animalMethods.eat
  animal.sleep = animalMethods.sleep
  animal.play = animalMethods.play

  return animal
}

const leo = Animal('Leo', 7)
const snoop = Animal('Snoop', 10)

// Shared methods are in their own object and referencing that
// object outside of the animal function is now possible
// meaning no memory waste or overly large animal objects!

//IN JS - every function has a prototype property propert that
//references an object.

function doThing(){}
console.log(doThing.prototype) // {}

// Object.Create
// We can improve this further using Object.create
// Allows you to create an object which will delegate to another object on
// failed lookups.

const parent = {
  name: 'Stacey',
  age: 35,
  heritage: 'Irish'
}

const child = Object.create(parent)
child.name = 'Ryan'
child.age = 7

console.log(child.name)
console.log(child.age)
console.log(child.heritage)

// Child is created - when there is a failed lookup - JS will delegate
// to the parent object.

// Prototypal instantiation

function Animal (name, energy) {
  let animal = Object.create(Animal.prototype)
  animal.name = name
  animal.energy = energy
}

Animal.prototype.eat = function (amount){
  console.log(`${this.name} is eating.`)
  this.energy += amount
}

Animal.prototype.sleep = function (length) {
  console.log(`${this.name} is sleeping.`)
  this.energy += length

Animal.prototype.play = function (length) {
  console.log(`${this.name} is playing.`)
  this.energy -= length
}

const leo = Animal('Leo', 7)
const snoop = Animal('Snoop', 10)

leo.eat(10)
snoop.play(5)

// Prototype is just a property every function in JS has, allows us to share
// methods across all instances of a function.

// Built in way in doing this is with the new keyword
// Without creating the object with Object.create - you cant deletage to the functions prototype
// on failed lookups. Without the return we wouldnt ever get back the created object

function Animal (name, energy) {
  let animal = Object.create(Animal.prototype)
  animal.name = name
  animal.energy = energy

  return animal
}

// new - when you invoke a function using new - those two lines (create and return)
// are done for you implicitly - the object created is called this

// using new - this is what happens under the hood

function Animal(name, energy) {
  // const this = Object. create(Animal.prototype)
  this.name = name
  this.energy = energy

  // return this
}

const leo = new Animal('Leo', 7)
const snoop = new Animal('Snoop', 10)

// Now without comments - to show how it really works

function Animal(name, energy) {
  this.name = name
  this.energy = energy
}
Animal.prototype.eat = function (amount){
  console.log(`${this.name} is eating.`)
  this.energy += amount
}

Animal.prototype.sleep = function (length) {
  console.log(`${this.name} is sleeping.`)
  this.energy += length

Animal.prototype.play = function (length) {
  console.log(`${this.name} is playing.`)
  this.energy -= length
}

const leo = new Animal('Leo', 7)
const snoop = new Animal('Snoop', 10)

// this object is created for us - because we called the constructor function with 'new'
// keyword. // If you leave off new when you invoke the function, the 'this'
// object never gets created - nor does it get implicitly returned

// THE NAME FOR THIS PATTERN IS 'PSEUDOCLASSICAL INSTANTIATION'

// Guess what - JS does contain classes - they were added to the language in 2015

class Animal {
  constructor(name, energy){
    this.name = name
    this.energy = energy
  }
  eat(amount){
    console.log(`${this.name} is eating.`)
    this.energy += amount
  }

  sleep(length) {
    console.log(`${this.name} is sleeping.`)
    this.energy += length

  play(length) {
    console.log(`${this.name} is playing.`)
    this.energy -= length
  }
}

const leo = new Animal('Leo', 7)
const snoop = new Animal('Snoop', 10)

// this is a lot cleaner as far as implementations go - but cool to know
// you can create classes as plain old JS - the new class way is just
// syntatical sugar over the exiting way we have called the pseudoclassical pattern
// to understand the convenience syntax of ES6 classes - its good to know this pattern.

// Ensuring that new is always called on an object on isntantation
function Animal(name, energy){
  if (this instanceof Animal === false){
    return new Animal(name,energy)
  }
  this.name = energy
  this.energy = energy
}
